# DO NOT CHANGE. This file is being managed from a central repository
# To know more simply visit https://github.com/honestbank/.github/blob/main/docs/about.md

name: go-tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GOPRIVATE: github.com/honestbank
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  test:
    name: go-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ "1.18" ]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Configure ssh-key for private modules
        env:
          SSH_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        run: mkdir -p ~/.ssh; echo "$SSH_KEY" > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa; git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Download dependencies
        run: make generate

      - name: Test and generate code coverage
        run: make test_and_cover

      - name: sonarcloud-scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.18"
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure ssh-key for private modules
        env:
          SSH_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        run: mkdir -p ~/.ssh; echo "$SSH_KEY" > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa; git config --global url."git@github.com:".insteadOf "https://github.com/"

      - name: Download dependencies
        run: make generate

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          args: --timeout=5m --modules-download-mode=readonly
          skip-pkg-cache: true
          skip-build-cache: true

  dockerize:
    name: dockerize
    needs: [ test, lint ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.18"
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure ssh-key for private modules
        env:
          SSH_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh; echo "$SSH_KEY" > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa; git config --global url."git@github.com:".insteadOf "https://github.com/"
          mkdir -p .ssh; echo "$SSH_KEY" > .ssh/id_rsa; chmod 600 .ssh/id_rsa;

      - name: Download dependencies
        run: make generate;

      - name: Build docker image
        run: |
          docker build --build-arg VERSION=${{ github.sha }} -t ${{ env.REPO_NAME }} .
          docker tag ${{ env.REPO_NAME }} asia.gcr.io/${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}:${{ github.sha }}

      - name: Setup gcloud (test)
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_CREDENTIALS }}
          project_id: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}

      - name: Configure docker for GCP
        run: gcloud auth configure-docker

      - name: Archive docker image
        run: |
          docker save ${{ env.REPO_NAME }} >> ${{ env.REPO_NAME }}${{ github.sha }}.tar

      - name: Upload image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}${{ github.sha }}.tar
          retention-days: 1

  trivy-scan:
    name: trivy-scan
    runs-on: ubuntu-latest
    needs: [ dockerize ]
    steps:
      - name: Download artifacts (Docker images) from previous workflows
        uses: actions/download-artifact@v2

      - name: Load Docker images from previous workflows
        run: |
          docker load --input ${{ env.REPO_NAME }}/${{ env.REPO_NAME }}${{ github.sha }}.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REPO_NAME }}'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  e2e:
    if: github.repository != 'honestbank/knative-template-go'
    name: end_to_end
    runs-on: ubuntu-latest
    needs: [ dockerize ]
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts (Docker images) from previous workflows
        uses: actions/download-artifact@v2

      - name: Load Docker images from previous workflows
        run: |
          docker load --input ${{ env.REPO_NAME }}/${{ env.REPO_NAME }}${{ github.sha }}.tar
          docker tag ${{ env.REPO_NAME }} asia.gcr.io/${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}:${{ github.sha }}

      - name: run end-to-end tests
        run: CONTAINER_REGISTRY_URL=asia.gcr.io/${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }} TAG_VERSION=${{ github.sha }} make e2e

      - name: get-docker-log
        if: ${{ failure() }}
        run: |
          CONTAINER_REGISTRY_URL=asia.gcr.io/${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }} TAG=${{ github.sha }} make docker-log

  release_job:
    name: semantic-release
    runs-on: ubuntu-latest
    needs: [e2e, trivy-scan]
    steps:
      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: "1.18"
        id: go

      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.21.1

      - uses: actions/setup-node@v2
        with:
          node-version: '17'

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure ssh-key for private modules
        env:
          SSH_KEY: ${{ secrets.ENGINEERING_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh; echo "$SSH_KEY" > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa; git config --global url."git@github.com:".insteadOf "https://github.com/"
          mkdir -p .ssh; echo "$SSH_KEY" > .ssh/id_rsa; chmod 600 .ssh/id_rsa;

      - name: download dependencies
        run: make generate

      - id: "google-cloud-auth-test"
        name: Google Cloud Auth (test)
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_CREDENTIALS }}"

      - name: Setup gcloud (test)
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: "latest" # This is the default value anyways, just being explicit
          project_id: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}

      - name: publish GCP login credentials (test)
        id: gcloud-test
        run: |
          echo "::set-output name=username::oauth2accesstoken"
          TOKEN=$(gcloud auth print-access-token)
          echo "::add-mask::${TOKEN}"
          echo "::set-output name=password::${TOKEN}"

      - id: "google-cloud-auth-prod"
        name: Google Cloud Auth (prod)
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_PROD_CONTAINER_REGISTRY_PROJECT_CREDENTIALS }}"

      - name: Setup gcloud (prod)
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: "latest" # This is the default value anyways, just being explicit
          project_id: ${{ secrets.GCP_PROD_CONTAINER_REGISTRY_PROJECT_NAME }}

      - name: publish GCP login credentials (prod)
        id: gcloud-prod
        run: |
          echo "::set-output name=username::oauth2accesstoken"
          TOKEN=$(gcloud auth print-access-token)
          echo "::add-mask::${TOKEN}"
          echo "::set-output name=password::${TOKEN}"

      - name: login to docker test registry
        run: echo "${{ steps.gcloud-test.outputs.password }}" | docker --config /tmp/docker-test.json login --username "${{ steps.gcloud-test.outputs.username }}" --password-stdin asia.gcr.io

      - name: login to docker prod registry
        run: echo "${{ steps.gcloud-prod.outputs.password }}" | docker --config /tmp/docker-prod.json login --username "${{ steps.gcloud-prod.outputs.username }}" --password-stdin asia.gcr.io

      - name: release
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.ENGINEERING_GITHUB_PERSONAL_ACCESS_TOKEN }}
          DOCKER_REPO_TEST: ${{ secrets.GCP_TEST_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}
          DOCKER_REPO_PROD: ${{ secrets.GCP_PROD_CONTAINER_REGISTRY_PROJECT_NAME }}/${{ env.REPO_NAME }}
        with:
          semantic_version: 18
          extra_plugins: |
            @semantic-release/git@10.0.1
            @semantic-release/exec@6.0.2
            @semantic-release/changelog@6.0.1
